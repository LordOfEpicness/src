// Date: 3/10/2013 7:49:43 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package MHF.Model;

import MHF.Entity.EntityMosswine;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLiving;
import net.minecraft.util.MathHelper;

public class ModelMosswine extends ModelBase
{
  //fields
    ModelRenderer Cap;
    ModelRenderer Head;
    ModelRenderer Snout;
    ModelRenderer Body;
    ModelRenderer FrontTheighR;
    ModelRenderer FrontTheighL;
    ModelRenderer FrontLegR;
    ModelRenderer FrontLegL;
    ModelRenderer BackTheighR;
    ModelRenderer BackTheighL;
    ModelRenderer BackLegR;
    ModelRenderer BackLegL;
  
  public ModelMosswine()
  {
    this.textureWidth = 128;
    this.textureHeight = 64;
    
      Cap = new ModelRenderer(this, 30, 0);
      Cap.addBox(-4F, -3F, -9F, 8, 1, 8);
      Cap.setRotationPoint(1.5F, 4F, -6F);
      Cap.setTextureSize(128, 64);
      Cap.mirror = true;
      setRotation(Cap, 9F, 0F, 0F);
      Head = new ModelRenderer(this, 0, 0);
      Head.addBox(-5F, -2F, -10F, 10, 10, 10);
      Head.setRotationPoint(1.5F, 4F, -6F);
      Head.setTextureSize(128, 64);
      Head.mirror = true;
      setRotation(Head, 9F, 0F, 0F);
      Snout = new ModelRenderer(this, 108, 29);
      Snout.addBox(-2.5F, 4F, -13F, 5, 4, 5);
      Snout.setRotationPoint(1.5F, 4F, -7F);
      Snout.setTextureSize(128, 64);
      Snout.mirror = true;
      setRotation(Snout, 9F, 0F, 0F); 
      Body = new ModelRenderer(this, 20, 20);
      Body.addBox(-5F, -10F, -7F, 13, 20, 11);
      Body.setRotationPoint(0F, 7F, 2F);
      Body.setTextureSize(128, 64);
      Body.mirror = true;
      setRotation(Body, 1.570796F, 0F, 0F);
      FrontTheighR = new ModelRenderer(this, 104, 0);
      FrontTheighR.addBox(0F, 0F, 0F, 6, 6, 7);
      FrontTheighR.setRotationPoint(-6F, 12F, -6.5F);
      FrontTheighR.setTextureSize(128, 64);
      FrontTheighR.mirror = true;
      setRotation(FrontTheighR, 0F, 0F, 0F);
      FrontTheighL = new ModelRenderer(this, 104, 0);
      FrontTheighL.addBox(0F, 0F, 0F, 6, 6, 7);
      FrontTheighL.setRotationPoint(3F, 12F, -6.5F);
      FrontTheighL.setTextureSize(128, 64);
      FrontTheighL.mirror = true;
      setRotation(FrontTheighL, 0F, 0F, 0F);
      FrontLegR = new ModelRenderer(this, 0, 38);
      FrontLegR.addBox(-2.5F, 0F, -2.5F, 5, 7, 5);
      FrontLegR.setRotationPoint(-3F, 17F, -3F);
      FrontLegR.setTextureSize(128, 64);
      FrontLegR.mirror = true;
      setRotation(FrontLegR, 0F, 0F, 0F);
      FrontLegL = new ModelRenderer(this, 0, 38);
      FrontLegL.addBox(-2.5F, 0F, -2.5F, 5, 7, 5);
      FrontLegL.setRotationPoint(6F, 17F, -3F);
      FrontLegL.setTextureSize(128, 64);
      FrontLegL.mirror = true;
      setRotation(FrontLegL, 0F, 0F, 0F);
      BackTheighR = new ModelRenderer(this, 100, 13);
      BackTheighR.addBox(0F, 0F, 0F, 6, 8, 8);
      BackTheighR.setRotationPoint(-6F, 9F, 5F);
      BackTheighR.setTextureSize(128, 64);
      BackTheighR.mirror = true;
      setRotation(BackTheighR, 0F, 0F, 0F);
      BackTheighL = new ModelRenderer(this, 100, 13);
      BackTheighL.addBox(0F, 0F, 0F, 6, 8, 8);
      BackTheighL.setRotationPoint(3F, 9F, 5F);
      BackTheighL.setTextureSize(128, 64);
      BackTheighL.mirror = true;
      setRotation(BackTheighL, 0F, 0F, 0F);
      BackLegR = new ModelRenderer(this, 0, 25);
      BackLegR.addBox(-2.5F, 0F, -2.5F, 5, 8, 5);
      BackLegR.setRotationPoint(-3F, 16F, 9F);
      BackLegR.setTextureSize(128, 64);
      BackLegR.mirror = true;
      setRotation(BackLegR, 0F, 0F, 0F);
      BackLegL = new ModelRenderer(this, 0, 25);
      BackLegL.addBox(-2.5F, 0F, -2.5F, 5, 8, 5);
      BackLegL.setRotationPoint(6F, 16F, 9F);
      BackLegL.setTextureSize(128, 64);
      BackLegL.mirror = true;
      setRotation(BackLegL, 0F, 0F, 0F);
  }
  
  public void render(Entity par1Entity, float par2, float par3, float par4, float par5, float par6, float par7)
  {
	super.render(par1Entity, par2, par3, par4, par5, par6, par7);
	setRotationAngles(par2, par3, par4, par5, par6, par7, par1Entity);
	Cap.render(par7);
    Head.render(par7);
    Snout.render(par7);
    Body.render(par7);
    FrontTheighR.render(par7);
    FrontTheighL.render(par7);
    FrontLegR.render(par7);
    FrontLegL.render(par7);
    BackTheighR.render(par7);
    BackTheighL.render(par7);
    BackLegR.render(par7);
    BackLegL.render(par7);
    
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity par7Entity)
  {
    super.setRotationAngles(par1, par2, par3, par4, par5, par6, par7Entity);
    this.Cap.rotateAngleY = par4 / (180F / (float)Math.PI);
    this.Cap.rotateAngleX = 0.2F;
    this.Head.rotateAngleY = par4 / (180F / (float)Math.PI);
    this.Head.rotateAngleX = 0.2F;
    this.Snout.rotateAngleY = par4 / (180F / (float)Math.PI);
    this.Snout.rotateAngleX = 0.2F;
    this.FrontLegR.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
    this.FrontLegL.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
    this.BackLegR.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
    this.BackLegL.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
  }
  
  public void setLivingAnimations(EntityLiving par1EntityLiving, float par2, float par3, float par4)
  {
      EntityMosswine var5 = (EntityMosswine)par1EntityLiving;
      int var6 = var5.getAttackTimer();

      if (var6 > 0)
      {
          this.Cap.rotateAngleX = 0.3F * this.func_78172_a(par4, par4);
          this.Head.rotateAngleX = 0.3F * this.func_78172_a(par4, par4);
          this.Snout.rotateAngleX = 0.3F * this.func_78172_a(par4, par4);
      }    
   }

  private float func_78172_a(float par1, float par2)
  {
      return (Math.abs(par1 % par2 - par2 * 0.5F) - par2 * 0.25F) / (par2 * 0.25F);
  }

}
  
